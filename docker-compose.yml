version: '3.8'

services:
  gemini-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gemini-bot
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - HEALTH_CHECK_PORT=3001
    env_file:
      - .env
    ports:
      - '3001:3001' # Health check endpoint
    volumes:
      - ./logs:/app/logs
    networks:
      - bot-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: gemini-bot-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: gemini_bot
      POSTGRES_USER: gemini_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - bot-network
    profiles:
      - with-db

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: gemini-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - bot-network
    profiles:
      - with-db

volumes:
  postgres_data:
  redis_data:

networks:
  bot-network:
    driver: bridge
